package:
  name: certdata
  version: 5b8de9e4c2ea
  short: Certificates for the Web. Originally for Mozilla Firefox, but used by others as well.

download:
  full_url: http://hg.mozilla.org/releases/mozilla-release/raw-file/${KX_CERTDATA_VERSION}/security/nss/lib/ckfw/builtins/certdata.txt
  file: ${KX_CERTDATA}.txt
  checksum: 704a3d80a845828329d17b718c23f878f81918da5979b6a40dea4ad8ca027f88

additional_downloads:
  - http://www.spi-inc.org/ca/spi-cacert.crt spi-cacert.crt 167d78086e9e96632b774a182dd14588e9dd32e2c7ba2aa5f9500791a0dd64ab

doc: |
  <section id="pkg_certdata_ca_certificates">
  <title>CA Certificates</title>
    <para>
      The <ulink url="http://www.mozilla.org/projects/security/certs/policy/">Mozilla trusted Certification Authority (CA) certificates</ulink>
      are used in <application>KaarPux</application> as trusted root certificates for Mozilla applications
      (e.g. <xref linkend="pkg_firefox" />), but also for other applications, such as
      OpenSSL (<xref linkend="pkg_openssl" />) and Java (<xref linkend="pkg_icedtea-cacerts" />).
    </para><para>
      The certificates are found in a single file (<filename>certdata.txt</filename>) from
      <ulink url="https://developer.mozilla.org/en-US/docs/NSS">Mozilla Network Security Services (NSS)</ulink>.
    </para><para>
      Certificate data is kept in <filename class="directory">/etc/ssl/certs</filename>.
    </para><para>
      The <filename>certdata.txt</filename> is processed by
      <filename>mk-ca-bundle.pl</filename>,
      which is a slightly modified version of 
      <ulink url="https://github.com/bagder/curl/blob/master/lib/mk-ca-bundle.pl">curl mk-ca-bundle.pl</ulink>,
      which creates <filename>ca-bundle.crt</filename>
      and <filename>*.pem</filename> files.
    </para>
  </section>

  <section id="pkg_certdata_additional_ca_certificates">
  <title>Additional CA Certificate</title>
    <para>
      We also install the <ulink url="http://www.spi-inc.org/ca">SPI CA root certificate</ulink>
      from <ulink url="http://www.spi-inc.org">Software in the Public Interest</ulink>.
      This is used by e.g. <ulink url="https://alioth.debian.org/">alioth.debian.org</ulink>.
      Note that this certificate is <emphasis>not</emphasis> automatically imported into e.g. <xref linkend="pkg_firefox" />.
    </para>
  </section>

  <section id="certificates_from_mozilla">
  <title>Certificates from Mozilla</title>
    <para>
      It seems that the cannonical source for certificates in Mozilla is
      <ulink url="https://hg.mozilla.org/projects/nss/log/tip/lib/ckfw/builtins/certdata.txt">hg.mozilla.org/projects/nss</ulink>. So
      <ulink url="https://hg.mozilla.org/projects/nss/log/tip/lib/ckfw/builtins/certdata.txt">this</ulink>
      is where to look to understand why certain certificates have been included or excluded.
    </para><para>
      Apparently, the <filename>certdata.txt</filename> "moves" through the Mozilla trees as follows:
      <itemizedlist>
        <listitem><para>
          <ulink url="https://hg.mozilla.org/projects/nss/log/tip/lib/ckfw/builtins/certdata.txt">nss</ulink>
        </para></listitem><listitem><para>
          <ulink url="http://hg.mozilla.org/mozilla-central/file/tip/security/nss/lib/ckfw/builtins/certdata.txt">mozilla-central</ulink>
        </para></listitem><listitem><para>
          <ulink url="https://hg.mozilla.org/releases/mozilla-aurora/file/default/security//nss/lib/ckfw/builtins/certdata.txt">mozilla-aurora</ulink>
        </para></listitem><listitem><para>
          <ulink url="https://hg.mozilla.org/releases/mozilla-beta/file/default/security/nss/lib/ckfw/builtins/certdata.txt">mozilla-beta</ulink>
        </para></listitem><listitem><para>
          <ulink url="https://hg.mozilla.org/releases/mozilla-release/file/default/security/nss/lib/ckfw/builtins/certdata.txt">mozilla-release</ulink>
       </para></listitem>
      </itemizedlist>
      In <application>KaarPux</application> we generally pick the latest
          <ulink url="https://hg.mozilla.org/releases/mozilla-release/file/default/security/nss/lib/ckfw/builtins">mozilla-release</ulink>.
    </para>
  </section>

  <section id="pkg_certdata_updating">
  <title>Updating</title>
    <para>
      Browse to the <ulink url="https://hg.mozilla.org/releases/mozilla-release/file/default/security/nss/lib/ckfw/builtins">tip of mozilla-release</ulink>,
      to get the latest released version.
      Select <systemitem>file</systemitem> next to <systemitem>certdata.txt</systemitem>.
      You should now have a <systemitem>URL</systemitem> like
      <systemitem>http://hg.mozilla.org/mozilla-release/file/fe0b9a75b342/security/nss/lib/ckfw/builtins/certdata.txt</systemitem>,
      where the checkin like <systemitem>fe0b9a75b342</systemitem> is the parameter you need to change for
      the <systemitem>version:</systemitem> in
      <ulink url="http://sourceforge.net/p/kaarpux/code/ci/HEAD/tree/master/packages/c/certdata.yaml">certdata.yaml</ulink>
    </para>
  </section>

  <section id="pkg_certdata_mk_ca_bundle">
  <title>mk-ca-bundle.pl</title>
    <para>
      You may also want to verify, that there is no update to 
      <ulink url="https://github.com/bagder/curl/blob/master/lib/mk-ca-bundle.pl">curl mk-ca-bundle.pl</ulink>,
      newer than
      <ulink url="http://sourceforge.net/p/kaarpux/code/ci/HEAD/tree/master/packages/c/certdata.files/mk-ca-bundle.pl">KaarPux mk-ca-bundle.pl</ulink>
    </para>
  </section>

  <section id="pkg_certdata_dependencies">
  <title>Dependencies</title>
    <warning><title /><para>
      If the <systemitem>certdata</systemitem> package is updated,
      you must reinstall <xref linkend="pkg_icedtea-cacerts" />.
    </para></warning>
  </section>


version:
  sensitive: 1
  installed: |
    my $v = `cat /etc/ssl/certs/certdata_version.txt`;
    return $v;
  upstream: |
    my $up = kxver_scrape_url(undef, "https://hg.mozilla.org/releases/mozilla-release/file/tip/security/nss/lib/ckfw/builtins/certdata.txt", qr |certdata.txt\@([0-9a-f]+)</|);
    my $v = `cat /etc/ssl/certs/certdata_version.txt`;
    chomp $v;
    if ($up eq $v) {
      return $up;
    } else {
      use Digest::SHA qw(sha256_hex);
      my $uf=kxver_get("http://hg.mozilla.org/releases/mozilla-release/raw-file/$up/security/nss/lib/ckfw/builtins/certdata.txt");
      my $df=kxver_get("file:///etc/ssl/certs/certdata.txt");
      if ( sha256_hex($uf) eq sha256_hex($df) ) { return $v; }
      return "?check?"
    }

bootstrap_8:

    - sh: |
        cp ../${KX_CERTDATA}.txt ./certdata.txt
        echo "${KX_CERTDATA_VERSION}" > certdata_version.txt
    # https://raw.githubusercontent.com/bagder/curl/619d1704ae04e1baa37b50744c3c778cc1978b5b/lib/mk-ca-bundle.pl
    - get_pkg_file: mk-ca-bundle.pl
    - patch: mk-ca-bundle.patch
    - sh: ./mk-ca-bundle.pl -n
    - sh: |
        openssl x509 -in ${KX_BASE}/../downloads/spi-cacert.crt -out spi-cacert.pem -outform PEM
#        openssl x509 -md5 -fingerprint -text -inform PEM < spi-cacert.pem >> ca-bundle.crt
        cat spi-cacert.pem >> ca-bundle.crt

    - sh: |
        test -e /etc/ssl/certs && mv /etc/ssl/certs /etc/ssl/certs.`date +%s`
        mkdir -pv /etc/ssl/certs
        cp -rp * /etc/ssl/certs
        ln -svf ca-bundle.crt /etc/ssl/certs/ca-certificates.crt
    - sh: |
        cd /etc/ssl/certs
        for f in *.pem; do
        ln -svf  $f $(openssl x509 -hash -noout -in $f).0 
        done

